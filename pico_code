# Import necessary libraries and modules
from machine import Pin, ADC
import time
import network
import ubinascii
import umqtt as mqtt
import urequests as requests
from stepper import Stepper
from servo import Servo
from mysecrets import *

# Initialize servos
base_servo = Servo(12, 500, 2500, 0.0, 180, 50)
elbow_servo = Servo(13, 500, 2500, 0.0, 180.0, 50)

# Initialize suction pins
suction = Pin(16, Pin.OUT)

# Initialize stepper
step_pin = 17
dir_pin = 18

ms1 = Pin(19, Pin.OUT, Pin.PULL_DOWN)  # different combos of ms1, ms2 states give microstep sizes. Low Low is 1 step
ms2 = Pin(20, Pin.OUT, Pin.PULL_DOWN)
enable = Pin(21, Pin.OUT, Pin.PULL_DOWN)  # when enable is on, stepper is disengaged. Use to keep stepper from overheating from staying on

enable.on()
ms1.off()
ms2.off()

slider = Stepper(step_pin, dir_pin, steps_per_rev=200, speed_sps=200)  # in our system, 200 steps = 4 cm irl motion

def setup():
    slider.overwrite_pos(0)  # sets whatever position is current as 0
    suction.value(0)
    base_servo.write(100)
    elbow_servo.write(97)
    print('setup complete')

# Tufts_Wireless seems to be a variable, assuming it should be a dictionary
wifi = {'ssid': 'your_wifi_ssid', 'pass': 'your_wifi_password'}

def connect_wifi(wifi):
    # Connect to Wi-Fi
    station = network.WLAN(network.STA_IF)
    station.active(True)
    mac = ubinascii.hexlify(network.WLAN().config('mac'), ':').decode()
    print("MAC " + mac)

    station.connect(wifi['ssid'], wifi['pass'])
    while not station.isconnected():
        time.sleep(1)
    print('Connection successful')
    print(station.ifconfig())

def move_stepper(message):
    try:
        # Assuming the message is a string like "[400, 2.4]"
        values = eval(message)
        if not isinstance(values, list) or len(values) != 2:
            raise ValueError("Invalid message format")

        steps = int(values[0])
        sleep_time = float(values[1])

        print('Moving stepper')
        print(f"Steps: {steps}")
        print(f"Sleep time: {sleep_time}")

        enable.off()
        slider.target(steps)  # move sent number of steps
        time.sleep(sleep_time)

    except Exception as e:
        print(f"Error processing message: {e}")
    finally:
        enable.on()

def move_base(angle):
    angle = float(angle)
    print('moving base')
    base_servo.write(angle)

def move_elbow(angle):
    angle = float(angle)
    print('moving elbow')
    elbow_servo.write(angle)

def control_suction(message):
    if message == "on":
        suction.value(1)
    elif message == "off":
        suction.value(0)
    else:
        print("the vacuum is confused :(")

def whenCalled(topic, msg):
    top = topic.decode()
    msg = msg.decode()
    print(top, msg)
    if top == "stepper":
        move_stepper(msg)
    elif top == "base":
        move_base(msg)
    elif top == "elbow":
        move_elbow(msg)
    elif top == "suction":
        control_suction(msg)
    else:
        print("I can't read this message :(")

def main():
    try:
        connect_wifi(wifi)
        fred = mqtt.MQTTClient('SarahElijah', MyBroker['ip'], keepalive=1000)
        print('Connected')
        fred.connect()
        fred.set_callback(whenCalled)
    except OSError as e:
        print('Failed')
        return
    fred.subscribe('base')
    fred.subscribe('elbow')
    fred.subscribe('stepper')
    fred.subscribe('suction')
    try:
        while True:
            fred.check_msg()
            time.sleep(.1)
    except Exception as e:
        print(e)
    finally:
        suction.off()
        fred.disconnect()
        print('done')

# Call the setup function to initialize components
setup()

# Call the main function to run the main loop
main()
